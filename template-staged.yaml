---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template that contains a Lambda function behind an
  API Gateway that has two stages mapped to two Lambda aliases

Parameters:
  BuildBucket:
    Description: S3 bucket that holds the build artifacts
    Type: String
    Default: mfl-scoring-builds

Resources:
  MflScoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt:
        - MflScoringStagedFunctionIamRole
        - Arn
      Code: 
        S3Bucket: !Sub ${BuildBucket}
        S3Key: builds/bootstrap.zip
        # S3ObjectVersion: TODO
      Handler: bootstrap
      Runtime: provided.al2
      MemorySize: 128
      Timeout: 5

  MflScoringStagedFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: kmsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - kms:Decrypt
            Resource: "*"
      - PolicyName: ssmAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParameter
            Resource:
            - arn:aws:ssm:us-east-1:287140326780:parameter/MFL_API_KEY
      - PolicyName: secretsManagerAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:DescribeSecret
            - secretsmanager:GetSecretValue
            Resource:
            #- !GetAtt MflScoringStagedApiKeySecret.Arn TODO FIX THIS
            - "*"

  MflScoringStagedApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      KmsKeyId: !GetAtt MflScoringStagedKey.Arn

  MflScoringStagedApiKeySecretResourcePolicy:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties: 
      BlockPublicPolicy: True
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
        - Resource: "*"
          Action: secretsmanager:*
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
        - Resource: "*"
          Action: 
            - secretsmanager:DescribeSecret
            - secretsmanager:Get*
            - secretsmanager:List*
          Effect: Allow
          Principal:
            AWS: !GetAtt MflScoringStagedFunctionIamRole.Arn
      SecretId: !Ref MflScoringStagedApiKeySecret

  MflScoringStagedKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: True
      EnableKeyRotation: True
      MultiRegion: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt MflScoringStagedFunctionIamRole.Arn
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
            Resource: '*'

  MflScoringApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MFL Scoring API
      FailOnWarnings: true

  MflScoringFunctionStageAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: MflScoringFunction
      FunctionVersion: "$LATEST"
      Name: STAGE
      
  MflScoringFunctionProdAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName:
        Ref: MflScoringFunction
      FunctionVersion: "$LATEST"
      Name: PROD

  MflScoringFunctionStagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: MflScoringFunctionStageAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: MflScoringApi
          - "/*"

  MflScoringFunctionProdPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: MflScoringFunctionProdAlias
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: MflScoringApi
          - "/*"

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - MflScoringFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ":"
          - Ref: AWS::AccountId
          - ":"
          - Ref: MflScoringApi
          - "/*"

  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: ApiGatewayLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
        
  MflScoringApiStageStage:
    DependsOn:
    - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: MflScoringApi
      StageName: stage
      Variables:
        LambdaAlias: STAGE

  MflScoringApiStageProd:
    DependsOn:
    - ApiGatewayAccount
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: MflScoringApi
      StageName: prod
      Variables:
        LambdaAlias: PROD

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - MflScoringRequest
    Properties:
      RestApiId:
        Ref: MflScoringApi
      StageName: DummyStage
      
  MflScoringResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: MflScoringApi
      ParentId:
        Fn::GetAtt:
        - MflScoringApi
        - RootResourceId
      PathPart: mfl-scoring

  MflScoringRequest:
    DependsOn: LambdaPermission
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      # Integration:
      #   Type: AWS
      #   IntegrationHttpMethod: POST
      #   Uri:
      #     Fn::Join:
      #     - ''
      #     - - 'arn:aws:apigateway:'
      #       - Ref: AWS::Region
      #       - ":lambda:path/2015-03-31/functions/"
      #       - Fn::GetAtt:
      #         - MflScoringFunction
      #         - Arn
      #       - ":${stageVariables.LambdaAlias}"
      #       - "/invocations"
      #   IntegrationResponses:
      #   - StatusCode: 200
      #   RequestTemplates:
      #     application/json:
      #       Fn::Join:
      #       - ''
      #       - - "{"
      #         - '  "name": "$input.params(''name'')"'
      #         - "}"
      # RequestParameters:
      #   method.request.querystring.name: false
      ResourceId:
        Ref: MflScoringResource
      RestApiId:
        Ref: MflScoringApi
      MethodResponses:
      - StatusCode: 200

Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: MflScoringApi
        - ".execute-api."
        - Ref: AWS::Region
        - ".amazonaws.com"
